#include <stdio.h>
#include <stdbool.h>

#define V 6 // Number of vertices

// Function to perform Depth-First Search and build topological order
void DFS(int graph[V][V], int vertex, bool visited[], int stack[], int *stackIndex) {
    visited[vertex] = true;

    for (int i = 0; i < V; i++) {
        if (graph[vertex][i] && !visited[i]) {
            DFS(graph, i, visited, stack, stackIndex);
        }
    }

    // Push the vertex to the stack
    stack[*stackIndex] = vertex;
    (*stackIndex)++;
}

// Function to find and print the topological order
void topologicalSort(int graph[V][V]) {
    bool visited[V];
    int stack[V]; // To store the topological order
    int stackIndex = 0;

    // Initialize visited array
    for (int i = 0; i < V; i++) {
        visited[i] = false;
    }

    // Call DFS for each unvisited vertex
    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            DFS(graph, i, visited, stack, &stackIndex);
        }
    }

    // Print the topological order
    printf("Topological Order: ");
    for (int i = V - 1; i >= 0; i--) {
        printf("%d ", stack[i]);
    }
    printf("\n");
}

int main() {
		printf("name : P.SUJITH\n");
		printf("regno : 192211473\n");
    int graph[V][V] = {
        {0, 0, 0, 0, 0, 0},
        {1, 0, 0, 0, 0, 0},
        {1, 1, 0, 0, 0, 0},
        {0, 1, 0, 0, 1, 0},
        {0, 0, 0, 1, 0, 1},
        {0, 0, 0, 0, 0, 0}
    };

    topologicalSort(graph);

    return 0;
}
