#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define V 7 // Number of vertices

// Adjacency list representation of the graph
struct Graph {
    int vertex;
    struct Graph* next;
};

struct Graph* adjList[V] = {NULL};

// Add an edge to the graph
void addEdge(int src, int dest) {
    struct Graph* newNode = (struct Graph*)malloc(sizeof(struct Graph));
    newNode->vertex = dest;
    newNode->next = adjList[src];
    adjList[src] = newNode;

    newNode = (struct Graph*)malloc(sizeof(struct Graph));
    newNode->vertex = src;
    newNode->next = adjList[dest];
    adjList[dest] = newNode;
}

// Breadth-First Search
void BFS(int start) {
    bool visited[V] = {false};
    int queue[V];
    int front = 0, rear = 0;

    queue[rear++] = start;
    visited[start] = true;

    while (front < rear) {
        int current = queue[front++];
        printf("%d ", current);

        struct Graph* temp = adjList[current];
        while (temp) {
            int neighbor = temp->vertex;
            if (!visited[neighbor]) {
                queue[rear++] = neighbor;
                visited[neighbor] = true;
            }
            temp = temp->next;
        }
    }
}

// Depth-First Search
void DFS(int vertex, bool visited[]) {
    visited[vertex] = true;
    printf("%d ", vertex);

    struct Graph* temp = adjList[vertex];
    while (temp) {
        int neighbor = temp->vertex;
        if (!visited[neighbor]) {
            DFS(neighbor, visited);
        }
        temp = temp->next;
    }
}

int main() {
    addEdge(0, 1);
    addEdge(0, 2);
    addEdge(1, 3);
    addEdge(1, 4);
    addEdge(2, 5);
    addEdge(2, 6);

    printf("Breadth-First Search starting from vertex 0: ");
    BFS(0);
    printf("\n");

    bool visited[V] = {false};
    printf("Depth-First Search starting from vertex 0: ");
    DFS(0, visited);
    printf("\n");

    return 0;
}
